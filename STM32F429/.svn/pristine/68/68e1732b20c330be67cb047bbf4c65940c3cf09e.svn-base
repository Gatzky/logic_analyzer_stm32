#include "stm32f4xx_hal.h"
#include "usart.h"
#include "usart_unit_test.h"
#include "cli.h"
#include "string.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"

QueueHandle_t myQueue;
xQueueHandle myQueue;
SemaphoreHandle_t mySemaphore;
xSemaphoreHandle myMutex;
//SemaphoreHandle_t myMutex;

void USART_POLL_WriteString(const char *string){
  size_t i=0;
  // for each character in the given string
  while (string[i]) {
    // write the current character to USART's data register (DR)
    USART1->DR = string[i];
    // wait until status register (SR) indicates that the transmitter is empty again (TXE)
    while((USART1->SR & UART_FLAG_TXE) == 0) {
      ;
    }
    // move to the next character
    i++;
  }
}

void taskTXQ(void* params){
	int element=0;
	
	while(1){
		if (xQueueSend(myQueue, &element, 1000) != pdPASS) {
			// Failed to put new element into the queue, even after 1000 ticks.
		}
		element++;
		vTaskDelay(1000);
		if(element == 10)
			element = 0;
	}
	
}

void taskRXQ(void* params){
	int element;
	char elem[2];
	
	while(1){
		if (xQueueReceive(myQueue, &element, 1000 ) == pdTRUE)  {
			// element was received successfully
			sprintf(elem,"%d",element);
			USART_POLL_WriteString(elem);
			//printf("Got %d from myQueue", element);
		} else {
			// unable to receive elements from the queue in the given time = 1000 ticks
		}
		vTaskDelay(1000);
	}
	
}



 
/*void taskHELLO(void* params){
  static SemaphoreHandle_t myMutex;
	
	taskENTER_CRITICAL();
	if (myMutex == NULL ) {
		myMutex= xSemaphoreCreateMutex();      
	}	
	taskEXIT_CRITICAL();
	
	while (1) {
		if( xSemaphoreTake(  myMutex, ( TickType_t ) 10 ) == pdTRUE ){
            USART_POLL_WriteString("hello world\n");
            xSemaphoreGive(  myMutex );
        }
		}
}*/

/**
 * Configures EXTI Line2 (connected to PG2 pin) in interrupt mode
 */
static void EXTI2_Init(void){
  GPIO_InitTypeDef  GPIO_InitStructure;
        
  // Enable GPIOG clock
  __GPIOG_CLK_ENABLE();
  
  // Configure PG2 pin as input with EXTI interrupt on the falling edge and pull-up
  GPIO_InitStructure.Speed = GPIO_SPEED_LOW;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStructure.Pull = GPIO_PULLUP;
  GPIO_InitStructure.Pin = GPIO_PIN_2;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 
        
  // Enable and set EXTI Line2 Interrupt to the lowest priority
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
}
 
/**
 * This function handles External line 2 interrupt request.
 */
void EXTI2_IRQHandler(void){
  // Check if EXTI line interrupt was detected
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_2) != RESET)  {
    // Clear the interrupt (has to be done for EXTI)
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
    // Toggle LED
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
		
		BaseType_t higherPriorityTaskWoken;
 
		xSemaphoreGiveFromISR(mySemaphore, &higherPriorityTaskWoken);
  }
}

/**
 * This function configures the LED pins
 */
 void SystemClock_Config(void) {
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
 
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 
  /* The voltage scaling allows optimizing the power consumption when the
     device is clocked below the maximum system frequency (see datasheet). */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
                                RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
}
 
void LED_Init(void){
  GPIO_InitTypeDef GPIO_InitStruct;
 
  // GPIO Ports Clock Enable
  __GPIOG_CLK_ENABLE();
 
  // Configure GPIO pin PG13
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;        // push-pull output
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;              // pull-down enabled
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;             // analog pin bandwidth limited
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  // Configure GPIO pin PG14
  GPIO_InitStruct.Pin   = GPIO_PIN_14;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;        // push-pull output
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;              // pull-down enabled
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;             // analog pin bandwidth limited
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

} /* LED_Init */

typedef struct {
        GPIO_TypeDef* gpio;    // GPIO port
        uint16_t      pin;     // GPIO pin
        TickType_t    ticks;   // delay expressed in system ticks
} BlinkParams;


static BlinkParams bp1 = { .gpio = GPIOG, .pin = GPIO_PIN_13, .ticks = 500};
static BlinkParams bp2 = { .gpio = GPIOG, .pin = GPIO_PIN_14, .ticks = 2000};

void commandLED(char *args){
    if(strcmp(args, "on") == 0){
        // turn the LED on
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
    } else if(strcmp(args, "off") == 0){
        // turn the LED off
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
    } else {
        USART_WriteString("Unrecognized argument. Available arguments are \"on\" and \"off\"\n\r");
    }
}
 
void commandLED2(char *args){
    if(strcmp(args, "on") == 0){
        // turn the LED on
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
    } else if(strcmp(args, "off") == 0){
        // turn the LED off
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
    } else {
        USART_WriteString("Unrecognized argument. Available arguments are \"on\" and \"off\"\n\r");
    }
}

void taskCLI(void* params){
	CLI_CommandItem wrong_item = { .callback = NULL,
                            .commandName = "WrongItemThisShouldn'tBeAdded",
                            .description = NULL};
        
	CLI_CommandItem item_LED = { .callback = commandLED,
                          .commandName = "LED",
                          .description = NULL};												
	CLI_CommandItem item_LED2 = { .callback = commandLED2,
                          .commandName = "LED2",
                          .description = NULL};
													
	if(CLI_AddCommand(&wrong_item) == false){
			USART_WriteString("ERROR in adding new item.\n\r");
	}
	if(CLI_AddCommand(&item_LED) == false){
			USART_WriteString("ERROR in adding new item.\n\r");
	}
 
	if(CLI_AddCommand(&item_LED2) == false){
			USART_WriteString("ERROR while adding new item.\n\r");
	}
	
	while(1){
		CLI_Proc();
		vTaskDelay(10);
	}		
}

void taskLED(void* params){
  // Blink the LED based on the provided arguments
  while (params) {
    // Toggle LED
    HAL_GPIO_TogglePin(((BlinkParams*)params)->gpio, ((BlinkParams*)params)->pin);
    // Introduce some delay
    vTaskDelay(((BlinkParams*)params)->ticks);
  } // while (params)
 
  // Delete the task in case the provided argument is NULL
  vTaskDelete(NULL);
 
} /* taskLED */

void taskSEM(void* params){
  // Blink the LED based on the provided arguments
  while (1) {

    if( xSemaphoreTake( mySemaphore, ( TickType_t ) 10 ) == pdTRUE )
    {
    // Introduce some delay
			commandLED("on");
		}
		vTaskDelay(500);
  } // while (params)
 
  // Delete the task in case the provided argument is NULL
  vTaskDelete(NULL);
 
} /* taskLED */

void activity(void){
    static volatile uint32_t period = 400000;
    volatile uint32_t i;
        
    // this loop executes 400000 or 80000 times,
    // which makes this activity once longer once shorter in time
    for (i = 0; i < period; i++) {
        __asm__ volatile ("NOP");
    }
        
    if (period == 400000) {
        period = 80000;
    } else {
        period = 400000;
    }
}
 
void taskDELAY(void* params){
    TickType_t start, stop;
        
    // we are going to use these two trace signals: 
    TRACE_SetLow(5);
    TRACE_SetLow(6);
        
    while (1) {         
        // trace signal 5 toggles on every loop
        TRACE_Toggle(5);
        // save activity start time
        start   = xTaskGetTickCount();
        // trace 6 goes high at the start of activity
        TRACE_SetHigh(6);
        activity();
        // trace 6 goes low at the end of activity
        TRACE_SetLow(6);
        // save activity end time
        stop    = xTaskGetTickCount();
        // delay task execution until 500ms - duration of activity
        //vTaskDelay(500 - (stop-start));
			  vTaskDelayUntil(&start,500);
    }
}

void __aeabi_assert(const char *expr, const char *file, int line) { 
    printf("ASSERT ERROR in file %s at line %d.\nExpression: %s\nGoing into infinite loop.\n", file, line, expr);
    while(1) {
        ;
    }
}

/**
 * Introduces a noticable delay in program execution
 */



/*int main(void){
	//int executionTime = 0;
  // Initialize STM32Cube HAL library
  HAL_Init();
	//Init clock
	SystemClock_Config();
	//Init interrupts
	EXTI2_Init();
  // Initialize LED pins
  LED_Init();
	//char c=0;
  
  // Blink the LED on pin PG.13
	USART_Init();
	TRACE_Init();
	
	//USART_UnitTest();
	
	

	mySemaphore = xSemaphoreCreateBinary();

	myQueue = xQueueCreate(10, sizeof(int));
	if (myQueue != NULL) {
		// Queue was created successfully and can now be used
	}

	
	
	//TaskHandle_t taskHandle;
	// create FreeRTOS task and save it's handle in taskHandle
	//if (pdPASS != xTaskCreate(taskLED, "led1", configMINIMAL_STACK_SIZE, &bp1, 3, &taskHandle)) {
  //  printf("ERROR: Unable to create task!\n");
	//}
	// bind the newly created task with trace signal 1
	//TRACE_BindTaskWithTrace(taskHandle, 1);
	
	//TaskHandle_t taskHandle2;
	//if (pdPASS != xTaskCreate(taskLED, "led2", configMINIMAL_STACK_SIZE, &bp2, 3, &taskHandle2)) {
	//	printf("ERROR: Unable to create task!\n");
	//}
	//TRACE_BindTaskWithTrace(taskHandle2, 2);
	
	//TaskHandle_t taskHandle3;
	//if (pdPASS != xTaskCreate(taskCLI, "cli", configMINIMAL_STACK_SIZE, NULL, 3, &taskHandle3)) {
  //  printf("ERROR: Unable to create taskcli!\n");
	//}
	//TRACE_BindTaskWithTrace(taskHandle3, 3);
	
	//TaskHandle_t taskHandle4;
	//if (pdPASS != xTaskCreate(taskDELAY, "delay", configMINIMAL_STACK_SIZE, NULL, 3, &taskHandle4)) {
  //  printf("ERROR: Unable to create taskcli!\n");
	//}
	//TRACE_BindTaskWithTrace(taskHandle4, 4);
	
	/*TaskHandle_t taskHandle5;
	if (pdPASS != xTaskCreate(taskSEM, "sem", configMINIMAL_STACK_SIZE, NULL, 3, &taskHandle5)) {
    printf("ERROR: Unable to create task!\n");
	}
	
	TaskHandle_t taskHandle6;
	if (pdPASS != xTaskCreate(taskHELLO, "hello1", configMINIMAL_STACK_SIZE, NULL, 3, &taskHandle6)) {
    printf("ERROR: Unable to create task!\n");
	}
	TaskHandle_t taskHandle7;
	if (pdPASS != xTaskCreate(taskHELLO, "hello2", configMINIMAL_STACK_SIZE, NULL, 3, &taskHandle7)) {
    printf("ERROR: Unable to create task!\n");
	}
	
	TaskHandle_t taskHandle8;
	if (pdPASS != xTaskCreate(taskTXQ, "txq", configMINIMAL_STACK_SIZE, NULL, 3, &taskHandle8)) {
    printf("ERROR: Unable to create task!\n");
	}
	TaskHandle_t taskHandle9;
	if (pdPASS != xTaskCreate(taskRXQ, "rxq", configMINIMAL_STACK_SIZE, NULL, 3, &taskHandle9)) {
    printf("ERROR: Unable to create task!\n");
	}
	
	vTaskStartScheduler();

  while (1) {
		CLI_Proc();
  }
        
} main */


int main (void){
  // Initialize STM32Cube HAL library
  HAL_Init();
  // Initialize LED pins
  LED_Init();
 
  // Create mutex  
  myMutex= xSemaphoreCreateMutex();
  // Create queue
  myQueue= xQueueCreate(100, 1);
 
  // Create RTOS tasks
  if (pdPASS != xTaskCreate(taskLED, "led", 200, NULL, 3, NULL )) {
    // should never get here, unless there is a memory allocation problem
  }
 
  // start FreeRTOS scheduler - the RTOS takes control over the microcontroller
  vTaskStartScheduler();
 
} /* main */ 
